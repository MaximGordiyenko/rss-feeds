version: '3'

services:
  
  back-end:
    build: ./server
    depends_on:
      - database
    ports:
      - "4000:4000"
    networks:
      - node-network
    container_name: back-end
    working_dir: /usr/src/app
    volumes:
      - ./server:/usr/src/app
#      - /usr/src/app/node_modules
    environment:
      PSQL_HOST: database
      POSTGRES_DB: postgres
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
      POSTGRES_USER: maxim
      POSTGRES_PASSWORD: ''
      NODE_LOCAL_PORT: 4000
      PSQL_PORT: 5432
      PSQL_NAME: postgres
      PSQL_USER: maxim
      PSQL_PASSWORD: ''
    tty: true
    command: npm run start
  
  front-end:
    build: ./client
    container_name: front-end
    links:
      - back-end
    ports:
      - "5173:5173"
    networks:
      - node-network
    working_dir: /usr/src/app
    volumes:
      - ./client:/usr/src/app
#      - /usr/src/app/node_modules
    environment:
      PSQL_NAME: postgres
      PSQL_USER: maxim
      PSQL_PASSWORD: ''
      PSQL_PORT: 5432
      DATABASE_URL: postgres://maxim:''@database:3030/postgres
    env_file:
      - ./.env
    command: npm run dev
  
  database:
    image: postgres:15.3-alpine
    container_name: postgres
    restart: always
    tty: true
    ports:
      - "5432:5432"
    networks:
      - node-network
    volumes:
      - ./database:/var/lib/postgresql/data
      - ./server/sql/createUsersTable.sql:/docker-entrypoint-initdb.d/createUsersTable.sql
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=maxim
      - POSTGRES_PASSWORD=''
  
  nginx:
    build:
      context: nginx
    container_name: nginx
    restart: always
    tty: true
    ports:
      - "8000:80"
    networks:
      - node-network
    depends_on:
      - back-end
      - front-end

volumes:
  database:

networks:
  node-network:
    driver: bridge
